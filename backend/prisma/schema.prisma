generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum PaymentMethod {
  RAZORPAY
  PAYLATER
}

enum UserRole {
  ADMIN
  STUDENT
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  password          String
  role              UserRole
  student           Student?
  admin             Admin?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  messages          Message[]
  receivedMessages  Message[]        @relation("MessageRecipient")
  notifications     Notification[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model Student {
  id                    String            @id @default(uuid())
  fullName              String
  gender                Gender
  dateOfBirth           DateTime
  phoneNumber           String
  country               String
  academicQualification String
  desiredDegree         String
  certificateUrl        String?
  recommendationLetterUrl String?
  profilePictureUrl     String?
  referredBy            String?
  referrerContact       String?
  agreesToTerms         Boolean           @default(false)
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String            @unique
  applicationStatus     ApplicationStatus @default(PENDING)
  paymentStatus         PaymentStatus     @default(PENDING)
  hasPaid               Boolean           @default(false) // Track if student has made any payment
  courseEnrollments     CourseEnrollment[]
  chapterProgresses     ChapterProgress[]
  examAttempts          ExamAttempt[]
  yearCertifications    YearCertification[]
  payments              Payment[]
  application           Application?
  videoProgresses       VideoProgress[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("students")
}

model Admin {
  id                String           @id @default(uuid())
  fullName          String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String           @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdCourses    Course[]
  createdChapters   Chapter[]
  createdExams      Exam[]
  reviewedApplications Application[]
  announcements     Announcement[]
  news              News[]

  @@map("admins")
}

model Application {
  id                    String            @id @default(uuid())
  email                 String            @unique
  fullName              String
  gender                Gender
  dateOfBirth           DateTime
  phoneNumber           String
  country               String
  academicQualification String
  desiredDegree         String
  certificateUrl        String?
  recommendationLetterUrl String?
  referredBy            String?
  referrerContact       String?
  agreesToTerms         Boolean           @default(false)
  status                ApplicationStatus @default(PENDING)
  appliedAt             DateTime          @default(now())
  reviewedBy            Admin?            @relation(fields: [adminId], references: [id])
  adminId               String?
  reviewedAt            DateTime?
  rejectionReason       String?           @db.Text
  student               Student?          @relation(fields: [studentId], references: [id])
  studentId             String?           @unique
  payment               Payment?
  
  @@map("applications")
}

model Payment {
  id                String           @id @default(uuid())
  amount            Decimal          @db.Decimal(10, 2)
  currency          String           @default("INR")
  status            PaymentStatus    @default(PENDING)
  paymentMethod     PaymentMethod
  transactionId     String?
  razorpayOrderId   String?          // Razorpay order ID
  razorpayPaymentId String?          // Razorpay payment ID
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  application       Application?     @relation(fields: [applicationId], references: [id])
  applicationId     String?          @unique
  paidAt            DateTime?
  paymentDueDate    DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("payments")
}

model CourseEnrollment {
  id                String           @id @default(uuid())
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  enrollmentDate    DateTime         @default(now())
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([studentId, courseId])
  @@map("course_enrollments")
}

model Course {
  id                String           @id @default(uuid())
  title             String
  description       String           @db.Text
  durationYears     Int
  coverImageUrl     String?
  isActive          Boolean          @default(true)
  createdBy         Admin            @relation(fields: [adminId], references: [id])
  adminId           String
  chapters          Chapter[]
  enrollments       CourseEnrollment[]
  yearCertifications YearCertification[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("courses")
}

model Chapter {
  id                String           @id @default(uuid())
  title             String
  description       String           @db.Text
  orderIndex        Int              // For ordering chapters
  courseYear        Int              // Which year of the course this chapter belongs to
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  videos            Video[]
  exam              Exam?
  createdBy         Admin            @relation(fields: [adminId], references: [id])
  adminId           String
  chapterProgresses ChapterProgress[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([courseId, courseYear, orderIndex])
  @@map("chapters")
}

model Video {
  id                String           @id @default(uuid())
  title             String
  description       String?          @db.Text
  vimeoId           String           // Vimeo video ID
  vimeoUrl          String           // Vimeo video URL
  duration          Int              // Duration in seconds
  orderIndex        Int              // For ordering videos within a chapter
  chapter           Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId         String
  watchedBy         VideoProgress[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([chapterId, orderIndex])
  @@map("videos")
}

model VideoProgress {
  id                String           @id @default(uuid())
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  video             Video            @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId           String
  watchedPercent    Int              @default(0) // 0-100
  lastWatchedAt     DateTime         @default(now())
  
  @@unique([studentId, videoId])
  @@map("video_progresses")
}

model Exam {
  id                String           @id @default(uuid())
  title             String
  description       String?          @db.Text
  passingScore      Int?             // Percentage required to pass (e.g., 70 for 70%)
  timeLimit         Int?             // Time limit in minutes (null for unlimited)
  chapter           Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId         String           @unique
  questions         Question[]
  examAttempts      ExamAttempt[]
  createdBy         Admin            @relation(fields: [adminId], references: [id])
  adminId           String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("exams")
}

model Question {
  id                String           @id @default(uuid())
  text              String           @db.Text
  questionType      String           // "multiple_choice", "true_false", etc.
  options           Json?            // For multiple choice questions - array of options
  correctAnswer     String?          // For objective questions
  points            Int              @default(1)
  exam              Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId            String
  answers           Answer[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("questions")
}

model ExamAttempt {
  id                String           @id @default(uuid())
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  exam              Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId            String
  startTime         DateTime         @default(now())
  endTime           DateTime?
  score             Int?
  isPassed          Boolean          @default(false)
  answers           Answer[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("exam_attempts")
}

model Answer {
  id                String           @id @default(uuid())
  studentAnswer     String           @db.Text
  isCorrect         Boolean?
  points            Int?
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId        String
  examAttempt       ExamAttempt      @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  examAttemptId     String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("answers")
}

model ChapterProgress {
  id                String           @id @default(uuid())
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  chapter           Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId         String
  isCompleted       Boolean          @default(false)
  lastVideoWatched  Int?             // orderIndex of the last video watched
  completedAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([studentId, chapterId])
  @@map("chapter_progresses")
}

model YearCertification {
  id                String           @id @default(uuid())
  student           Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId          String
  year              Int
  certificateUrl    String?
  issuedAt          DateTime         @default(now())
  
  @@unique([studentId, courseId, year])
  @@map("year_certifications")
}

model Message {
  id                String           @id @default(uuid())
  content           String           @db.Text
  sender            User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId          String
  recipient         User             @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId       String
  isRead            Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("messages")
}

model Notification {
  id                String           @id @default(uuid())
  title             String
  content           String           @db.Text
  isRead            Boolean          @default(false)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime         @default(now())

  @@map("notifications")
}

model EmailLog {
  id                String           @id @default(uuid())
  to                String
  subject           String
  content           String           @db.Text
  status            String           // "sent", "failed", etc.
  errorMessage      String?          @db.Text
  createdAt         DateTime         @default(now())

  @@map("email_logs")
}

model SystemSettings {
  id                String           @id @default(uuid())
  key               String           @unique
  value             String           @db.Text
  updatedAt         DateTime         @updatedAt

  @@map("system_settings")
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  imageUrl  String?  // Optional single image (keeping for backward compatibility)
  isActive  Boolean  @default(true)
  createdBy Admin    @relation(fields: [adminId], references: [id])
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // New fields for multiple attachments
  images    AnnouncementImage[]
  files     AnnouncementFile[]
  videos    AnnouncementVideo[]

  @@map("announcements")
}

model AnnouncementImage {
  id             String       @id @default(uuid())
  url            String       // Cloudinary URL
  fileName       String       // Original filename
  fileSize       Int          // File size in bytes
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  createdAt      DateTime     @default(now())

  @@map("announcement_images")
}

model AnnouncementFile {
  id             String       @id @default(uuid())
  url            String       // Cloudinary URL
  fileName       String       // Original filename
  fileSize       Int          // File size in bytes
  fileType       String       // MIME type
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  createdAt      DateTime     @default(now())

  @@map("announcement_files")
}

model AnnouncementVideo {
  id             String       @id @default(uuid())
  vimeoId        String       // Vimeo video ID
  vimeoUrl       String       // Vimeo video URL
  embedUrl       String       // Vimeo embed URL
  fileName       String       // Original filename
  fileSize       Int          // File size in bytes
  duration       Int?         // Duration in seconds
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
  createdAt      DateTime     @default(now())

  @@map("announcement_videos")
}

model News {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdBy   Admin    @relation(fields: [adminId], references: [id])
  adminId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Media attachments
  images      NewsImage[]
  videos      NewsVideo[]

  @@map("news")
}

model NewsImage {
  id        String   @id @default(uuid())
  url       String   // Cloudinary URL
  fileName  String   // Original filename
  fileSize  Int      // File size in bytes
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId    String
  createdAt DateTime @default(now())

  @@map("news_images")
}

model NewsVideo {
  id        String   @id @default(uuid())
  vimeoId   String   // Vimeo video ID
  vimeoUrl  String   // Vimeo video URL
  embedUrl  String   // Vimeo embed URL
  fileName  String   // Original filename
  fileSize  Int      // File size in bytes
  duration  Int?     // Duration in seconds
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId    String
  createdAt DateTime @default(now())

  @@map("news_videos")
}

model RefreshToken {
  id          String   @id @default(uuid())
  tokenId     String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("refresh_tokens")
}