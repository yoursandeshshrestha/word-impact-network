generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Degree {
  BACHELORS
  MASTERS
  PHD
  DIPLOMA
  CERTIFICATE
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  role              UserRole
  fullName          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  studentProfile    StudentProfile?
  adminProfile      AdminProfile?
  chatMessagesFrom  Message[]         @relation("MessageFrom")
  chatMessagesTo    Message[]         @relation("MessageTo")
  courseEnrollments CourseEnrollment[]
  applications      Application[]
}

model StudentProfile {
  id                     String   @id @default(uuid())
  gender                 Gender
  dateOfBirth            DateTime
  phoneNumber            String
  country                String
  academicQualification  String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String   @unique
  chapterProgress        ChapterProgress[]
  examResults            ExamResult[]
}

model AdminProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

model Application {
  id                     String            @id @default(uuid())
  fullName               String
  gender                 Gender
  dateOfBirth            DateTime
  email                  String            @unique
  phoneNumber            String
  country                String
  academicQualification  String
  desiredDegree          Degree
  certificateUrl         String
  recommendationLetterUrl String
  wasReferred            Boolean
  referrerName           String?
  referrerContact        String?
  status                 ApplicationStatus @default(PENDING)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  user                   User?             @relation(fields: [userId], references: [id])
  userId                 String?
}

model Course {
  id               String            @id @default(uuid())
  title            String
  description      String
  price            Float
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  chapters         Chapter[]
  enrollments      CourseEnrollment[]
}

model CourseEnrollment {
  id          String    @id @default(uuid())
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String
  student     User      @relation(fields: [studentId], references: [id])
  studentId   String
  enrolledAt  DateTime  @default(now())
  
  @@unique([courseId, studentId])
}

model Chapter {
  id               String            @id @default(uuid())
  title            String
  description      String
  orderIndex       Int
  course           Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  videos           Video[]
  exam             Exam?
  chapterProgress  ChapterProgress[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([courseId, orderIndex])
}

model Video {
  id          String    @id @default(uuid())
  title       String
  description String
  url         String    // URL to Backblaze
  orderIndex  Int
  duration    Int       // in seconds
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([chapterId, orderIndex])
}

model ChapterProgress {
  id            String    @id @default(uuid())
  chapter       Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId     String
  student       StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     String
  isCompleted   Boolean   @default(false)
  lastAccessed  DateTime  @default(now())

  @@unique([chapterId, studentId])
}

model Exam {
  id          String      @id @default(uuid())
  title       String
  description String
  passingScore Int
  chapter     Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String      @unique
  questions   Question[]
  examResults ExamResult[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  text          String
  options       String[] // JSON array of options
  correctOption Int      // Index of the correct option
  exam          Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ExamResult {
  id            String   @id @default(uuid())
  exam          Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId        String
  student       StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     String
  score         Int
  passed        Boolean
  answers       Json     // Store student answers
  attemptedAt   DateTime @default(now())

  @@unique([examId, studentId, attemptedAt])
}

model Message {
  id          String   @id @default(uuid())
  content     String
  fromUser    User     @relation("MessageFrom", fields: [fromUserId], references: [id])
  fromUserId  String
  toUser      User     @relation("MessageTo", fields: [toUserId], references: [id])
  toUserId    String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}